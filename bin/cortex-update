#!/usr/bin/env perl
# /=====================================================================\ #
# |  CorTeX Framework                                                   | #
# | Update the components of a CorTeX Peripheral installation           | #
# |=====================================================================| #
# | Part of the LaMaPUn project: https://trac.kwarc.info/lamapun/       | #
# |  Research software, produced as part of work done by:               | #
# |  the KWARC group at Jacobs University                               | #
# | Copyright (c) 2012                                                  | #
# | Released under the GNU Public License                               | #
# |---------------------------------------------------------------------| #
# | Deyan Ginev <d.ginev@jacobs-university.de>                  #_#     | #
# | http://kwarc.info/people/dginev                            (o o)    | #
# \=========================================================ooo==U==ooo=/ #
use strict;
use warnings;

my $report = q{};
my $hostname = `hostname`;
chomp($hostname);
if ($hostname eq 'master') {
  # We're on HULK, get the revision report from a level down:
  print `ssh node100 '~/CorTeX-Peripheral/bin/cortex-update'` ||''; }
else {
  #TODO: We should receive the current Git revision maybe, to avoid reinstalling? Or does the server take care of that?
  $report .= `TMPDIR=/tmp; cpanm git://github.com/brucemiller/LaTeXML.git`;
  #$report .= `cpanm git://github.com/KWARC/LaTeXML-Plugin-arXMLiv.git`;
  $report .= `cd ~/CorTeX-Peripheral; git pull; perl Makefile.PL; make; make test`; # make test?
  my ($cortex_spawner) = grep {defined} map {/^\w+\s+(\d+).+cortex\-spawner\s(.+)$/ ? [$1,$2] : undef} grep {/perl/} split("\n",`ps -ef |grep cortex-spawner`||'');
  if ($cortex_spawner) {
    my $pid = $cortex_spawner->[0];
    my $args = $cortex_spawner->[1];
    # Restart the spawner so that it picks up new definitions:
    if (kill 'KILL', $pid) {
      $report .= `nohup perl ~/CorTeX-Peripheral/bin/cortex-spawner $args &`;
    }
  }
}
# 5. Print back the report:
print "$report\n";
exit 0;