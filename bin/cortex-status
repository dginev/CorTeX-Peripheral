#!/usr/bin/env perl
# /=====================================================================\ #
# |  CorTeX Framework                                                   | #
# | Status report for CorTeX worker machines                            | #
# |=====================================================================| #
# | Part of the LaMaPUn project: https://trac.kwarc.info/lamapun/       | #
# |  Research software, produced as part of work done by:               | #
# |  the KWARC group at Jacobs University                               | #
# | Copyright (c) 2012                                                  | #
# | Released under the GNU Public License                               | #
# |---------------------------------------------------------------------| #
# | Deyan Ginev <d.ginev@jacobs-university.de>                  #_#     | #
# | http://kwarc.info/people/dginev                            (o o)    | #
# \=========================================================ooo==U==ooo=/ #
use strict;
use warnings;
use JSON::XS qw(encode_json decode_json);
use Unix::Processors;

my $report = {};
my $hostname = `hostname`;
chomp($hostname);
if ($hostname eq 'master') {
  # We're on HULK, get the revision report from a level down:
  $report = decode_json(`ssh node100 '~/CorTeX-Peripheral/bin/cortex-status'` ||'');
  # And grep through qstat to monitor our processes:
  my $process_report = `qstat | grep cortex-worker`;
  # TODO: Finish this, it will only be empty for now;
  $report->{worker_processes} = 0;
  $report->{machine_cpus} = 'HULK SMASH'; }
else {
  # We want to know revisions of:
  # 1. CorTeX-Peripheral
  # TODO: Figure out a more robust method for finding the CorTeX-Peripheral directory
  $report->{cortex_peripheral_revision} = `cd ~/CorTeX-Peripheral; git log --max-count=1 --abbrev-commit --pretty="\%h"`;
  chomp($report->{cortex_peripheral_revision});
  # 2. LaTeXML
  $report->{latexml_revision} = `perl -MLaTeXML -e 'print \$LaTeXML::REVISION;'`;
  # 3. CorTeX worker processes
  my $ps_summary = `ps -aef | grep cortex-worker`;
  my @process_descriptions = grep {length($_);} map {/cortex\-worker\s+(\S+)/ ? $1 : ''} split("\n",$ps_summary);
  $report->{worker_processes} = scalar(@process_descriptions);
  # 4. CPUs available
  $report->{machine_cpus} = Unix::Processors->new->max_online; }

# 5. Print back the report:
print encode_json($report),"\n";
exit 0;